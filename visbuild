#!/bin/bash
set -e

COMMIT="$1"
LOGFILE="$2"

SAFE_COMMIT=$(echo -n "$COMMIT" | tr -c '[a-zA-Z0-9]' '-')

export BLINK=0 # Don't fail test if blink differs
export BLINK_CAPTURE=1 # Capture screenshots
export ALLOW_LOG_FAILS=1 # Capture screenshots
export ENABLE_IMAGES=1
export MAXIMIZE=1
export BYPASS_STRIPE=1

cd visual/timecounts-frontend
pkill -f 'unicorn master' || true
pkill -f 'rake jobs:work' || true
git fetch >>"$LOGFILE" 2>&1 || (echo "Git fetch failed" && exit 1)
git reset --hard "$COMMIT" >>"$LOGFILE" 2>&1 || (echo "Git reset failed" && exit 2)
git clean -df >>"$LOGFILE" 2>&1 || (echo "Git clean failed" && exit 3)
git checkout origin/master test/test_helper.coffee install-api.sh run-api.sh test.sh src/server/connect-fs.coffee src/server/middleware/session.coffee
rm -Rf build >>"$LOGFILE" 2>&1 || (echo "Delete build folder failed" && exit 4)
npm install >>"$LOGFILE" 2>&1 || (echo "npm install failed" && exit 5)
./install-api.sh >>"$LOGFILE" 2>&1 || (echo "install-api failed" && exit 6)
TEST_STATUS=0
mkdir -p screenshots >>"$LOGFILE" 2>&1
./test.sh >>"$LOGFILE" 2>&1 || TEST_STATUS=$?
if [ "$TEST_STATUS" != "0" ]; then
  echo "Test failed for $COMMIT";
  echo '```'
  tail -n 100 $LOGFILE
  echo '```'
  #exit $TEST_STATUS
fi
cd ../..
mkdir -p "archive/$SAFE_COMMIT/" >>"$LOGFILE" 2>&1
cp -r visual/timecounts-frontend/screenshots/* archive/$SAFE_COMMIT >>"$LOGFILE" 2>&1
exit 0
